type: edu
files:
- name: src/bullscows/Main.java
  visible: true
  text: |
    package bullscows;

    import java.util.*;

    public class Main {
        public static void main(String[] args) {
            String code = generateCode();
            String answer = "";
            String grade = "";

            int attepmptCounter = 0;
            boolean stop = false;
            Main main = new Main();

            // Prompt the user
            Scanner scanner = new Scanner(System.in);
            System.out.println("The secret code is prepared: ****.");

            while (!stop) {
                attepmptCounter++;
                System.out.print("Turn " + attepmptCounter + ". Answer: ");
                answer = scanner.nextLine();
                grade = main.gradeProcessor(code, answer);

                if (grade.equals("4 bulls.")) {
                    System.out.println("Congrats! The code is: " + code);
                    stop = true;
                }
            }



        }

        public static String generateCode() {
            Integer[] arr = {0,1,2,3,4,5,6,7,8,9};
            Collections.shuffle(Arrays.asList(arr));
            StringBuilder result = new StringBuilder();
            for (int i = 0; i < 4; i++) {
                result.append(arr[i]);
            }
            return result.toString();
        }

        public String gradeProcessor(String code, String answer) {
            int bullCounter = 0;
            int cowCounter = 0;
            String result = "";

            // Arranging the codeArray
            int[] codeArray = new int[code.length()];
            for (int i = 0; i < code.length(); i++) {
                codeArray[i] = Character.getNumericValue(code.charAt(i));
            }

            // Arranging the cowArray
            int[] answerArray = new int[code.length()];
            for (int i = 0; i < code.length(); i++) {
                answerArray[i] = Character.getNumericValue(answer.charAt(i));
            }

            // Counting the bulls and cows
            if (code.equals(answer)) {
                bullCounter = 4;
            } else {
                for (int i = 0; i < answerArray.length; i++) {
                    for (int j = 0; j < codeArray.length; j++) {
                        if (answerArray[i] == codeArray[j] && i==j) {
                            bullCounter++;
                        } else if (answerArray[i] == codeArray[j]) {
                            cowCounter++;
                        }
                    }
                }
            }

            if (bullCounter != 0 && cowCounter == 0) {
                result = bullCounter + " bulls.";
            } else if (bullCounter == 0 && cowCounter != 0) {
                result = cowCounter + " cows.";
            } else if (bullCounter != 0 && cowCounter != 0) {
                result = bullCounter + " bulls and " + cowCounter + " cows.";
            }

            return result;
        }
    }
  learner_created: false
- name: test/BullsCowsTest.java
  visible: false
  text: |-
    import bullscows.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.LinkedHashSet;
    import java.util.List;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    public class BullsCowsTest extends StageTest<String> {

        // basic test case
        @DynamicTestingMethod
        CheckResult test1() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("4").toLowerCase().trim();

            return outputCheck(output, 4);
        }

        @DynamicTestingMethod
        CheckResult test2() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("1").toLowerCase().trim();

            return outputCheck(output, 1);
        }

        // test of incorrect input
        @DynamicTestingMethod
        CheckResult test4() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("11").toLowerCase().trim();

            return outputCheck(output, 11);
        }

        @DynamicTestingMethod
        CheckResult test5() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("6").toLowerCase().trim();

            return outputCheck(output, 6);
        }

        @DynamicTestingMethod
        CheckResult test6() {
            TestedProgram main = new TestedProgram(Main.class);
            main.start();
            String output = main.execute("3").toLowerCase().trim();

            return outputCheck(output, 3);
        }


        CheckResult outputCheck(String source, int length) {

            if (length > 10) {
                if (source.toLowerCase().contains("error")) {
                    return CheckResult.correct();
                } else {
                    return CheckResult.wrong("An error message expected with input " +
                            "\"" + length + "\"");
                }
            }

            List<Integer> integers = expect(source).toContain(1).integers();
            source = "" + integers.get(0);

            if (source.length() != length) {
                return CheckResult.wrong("The output number of your program has " +
                        "an incorrect length (found " + source.length() + ")");
            }

            List<Integer> temp = stringToArrayOfNumbers(source);
            temp = new ArrayList<>(new LinkedHashSet<>(temp));

            if (temp.toArray().length != source.length()) {
                return CheckResult.wrong("Digits in the generated number are not unique.");
            }

            return CheckResult.correct();
        }

        private static List<Integer> stringToArrayOfNumbers(String array) {
            return Arrays.stream(array.split(""))
                    .map(Integer::parseInt)
                    .collect(Collectors.toList());
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/53/stages/289/implement
status: Unchecked
record: -1
